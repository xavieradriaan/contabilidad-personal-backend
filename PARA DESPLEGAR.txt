ACTUALIZAR LAS LIBRERÍAS EN EL ARCHIVO REQUIREMENTS:
pip freeze > requirements.txt


MIGRAR B.D:

rm -rf migrations
flask db init
flask db migrate -m "Add descripcion to Ingresoo"


-------- PARA PONER EN LOCAL-----
git branch
git checkout dev


----PARA UNIR LO DE PRE A DEV------

-------

git branch
git checkout dev
git merge pre
git add .
git commit -m "Resuelve conflictos del merge"
git push origin dev


----------------------------- EN LOCAL ---------------
#__init__.py
import atexit
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_restful import Api
from flask_login import LoginManager
from flask_cors import CORS
from flask_bcrypt import Bcrypt
from flask_jwt_extended import JWTManager
from apscheduler.schedulers.background import BackgroundScheduler
from flask_migrate import Migrate
import os
from datetime import timedelta

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://xavier:1234@localhost/contabilidad_personal'
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['JWT_SECRET_KEY'] = os.environ.get('JWT_SECRET_KEY', 'your_jwt_secret_key')
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(minutes=5)  # Expiración del token en 5 minutos

db = SQLAlchemy(app)
migrate = Migrate(app, db)
api = Api(app)
login_manager = LoginManager(app)
bcrypt = Bcrypt(app)
jwt = JWTManager(app)
CORS(app)  # Habilitar CORS para todas las rutas

from app import routes
from app.models import PagoRecurrente  # Importar el modelo PagoRecurrente

def reset_pagos_recurrentes():
    with app.app_context():
        pagos_recurrentes = PagoRecurrente.query.all()
        for pago in pagos_recurrentes:
            pago.pagado = False
        db.session.commit()
        app.logger.info("Pagos recurrentes restablecidos")

scheduler = BackgroundScheduler()
scheduler.add_job(
    func=reset_pagos_recurrentes,
    trigger='cron',
    day='last',
    hour=23,
    minute=59,
    second=59
)
scheduler.start()

# Shut down the scheduler when exiting the app
atexit.register(lambda: scheduler.shutdown())

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))






-------------PARA UNIR Y LUEGO DESPLEGAR: de Dev a Pre ------------------

TODO DEBO ESTAR EN EL ENVIORNMENT DE (VENV)
- -PRIMERO MIGRAR B.D: - -

-------variables de entorno-----

unset DATABASE_URL
unset DATABASE_PUBLIC_URL
unset PGPASSWORD

export DATABASE_URL='postgresql://postgres:sXcuyMpiIdpYSGUhNXeIDmatpsyCfnYy@junction.proxy.rlwy.net:40186/railway'
export DATABASE_PUBLIC_URL='postgresql://postgres:sXcuyMpiIdpYSGUhNXeIDmatpsyCfnYy@junction.proxy.rlwy.net:40186/railway'
export PGPASSWORD='sXcuyMpiIdpYSGUhNXeIDmatpsyCfnYy'
export SECRET_KEY='b90a493444a04c2013fb965eed73962e'
export JWT_SECRET_KEY='b90a493444a04c2013fb965eed73962e'


conectarse de manera remota a la base:
psql -h junction.proxy.rlwy.net -U postgres -p 40186 -d railway

y ver si aparecen los nuevos cambios en la bd



----

rm -rf migrations
DROP TABLE IF EXISTS alembic_version;  (en la b.d)
flask db init
flask db migrate -m "Add descripcion to Ingreso"
flask db upgrade

---- AHORA SÍ PASOS ----
git add .
git commit "cambios"
git push 

git branch
git checkout pre
git merge dev
-- AQUÍ DEBES COPIAR Y PEGAR EL __init__.py de abajo para desplegar -- 
git add .
git commit -m "Resuelve conflictos del merge"
git push origin pre



------------ EN PRE PARA DESPLEGAR--------------
import atexit
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_restful import Api
from flask_login import LoginManager
from flask_cors import CORS
from flask_bcrypt import Bcrypt
from flask_jwt_extended import JWTManager
from apscheduler.schedulers.background import BackgroundScheduler
from flask_migrate import Migrate
import os
from datetime import timedelta

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL')
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'your_secret_key')
app.config['JWT_SECRET_KEY'] = os.environ.get('JWT_SECRET_KEY', 'your_jwt_secret_key')
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(minutes=40)  # Expiración del token en 5 minutos

db = SQLAlchemy(app)
migrate = Migrate(app, db)
api = Api(app)
login_manager = LoginManager(app)
bcrypt = Bcrypt(app)
jwt = JWTManager(app)
CORS(app)  # Habilitar CORS para todas las rutas

from app import routes
from app.models import PagoRecurrente  # Importar el modelo PagoRecurrente

def reset_pagos_recurrentes():
    with app.app_context():
        pagos_recurrentes = PagoRecurrente.query.all()
        for pago in pagos_recurrentes:
            pago.pagado = False
        db.session.commit()
        app.logger.info("Pagos recurrentes restablecidos")

scheduler = BackgroundScheduler()
scheduler.add_job(
    func=reset_pagos_recurrentes,
    trigger='cron',
    day='last',
    hour=23,
    minute=59,
    second=59
)
scheduler.start()

# Shut down the scheduler when exiting the app
atexit.register(lambda: scheduler.shutdown())

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))




